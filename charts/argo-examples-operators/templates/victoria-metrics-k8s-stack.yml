{{ $chartName := "victoria-metrics-k8s-stack" }}
{{ $repoURL := "https://victoriametrics.github.io/helm-charts" }}
{{ $appConfig := merge (index $.Values $chartName) $.Values.common }}
{{- if ne $appConfig.enabled false }}
{{ $argoConfig := merge (default $appConfig.argocdApps (dict)) $.Values.argocdApps }}
{{ $appName := default $chartName $appConfig.nameOverride }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ $appName }}
  namespace: {{ $argoConfig.namespace }}
  annotations: {{ toYaml $argoConfig.annotations | nindent 4 }}
spec:
  project: {{ $argoConfig.project }}
  destination:
    namespace: {{ default $appName $appConfig.namespace }}
    server: {{ $argoConfig.destination.server }}
  syncPolicy: {{ toYaml $argoConfig.syncPolicy | nindent 4 }}
  source: 
    repoURL: {{ $repoURL }}
    chart: {{ $chartName }}
    targetRevision: {{ $appConfig.targetRevision }}
    helm:
      valuesObject:
{{- if $appConfig.helmConfig }}
{{ toYaml $appConfig.helmConfig | indent 8 }}
{{- else }}
        installCRDs: true
        argocdReleaseOverride: victoria-metrics-k8s-stack
        victoria-metrics-operator:
          operator:
            disable_prometheus_converter: false
            prometheus_converter_add_argocd_ignore_annotations: true
            psp_auto_creation_enabled: false
        vmagent: { enabled: true }
        vmsingle: { enabled: false }
        vmcluster:
          enabled: true
          spec: { retentionPeriod: "7d" }
        vmalert: { enabled: false }
        alertmanager: { enabled: false }
        prometheus-node-exporter:
          hostNetwork: false
          revisionHistoryLimit: {{ $appConfig.revisionHistoryLimit }}
        kube-state-metrics: {}
        grafana:
          enabled: true
          assertNoLeakedSecrets: true
          revisionHistoryLimit: {{ $appConfig.revisionHistoryLimit }}
          deploymentStrategy: { type: Recreate }
          persistence: { enabled: true, type: pvc }
          ingress:
            enabled: {{ and (default false $appConfig.ingress.enabled) (not (not $appConfig.ingress.rootDomain)) }}
            {{- if and (default false $appConfig.ingress.enabled) (not (not $appConfig.ingress.rootDomain)) }}
            annotations:
              cert-manager.io/cluster-issuer: {{ $appConfig.ingress.clusterIssuer }}
            hosts:
              - "grafana.{{ $appConfig.ingress.rootDomain }}"
            tls:
              - secretName: grafana-tls
                hosts:
                  - "grafana.{{ $appConfig.ingress.rootDomain }}"
            {{- end }}
          {{- if or (eq $appConfig.auth.type "google") (and (default false $appConfig.ingress.enabled) (not (not $appConfig.ingress.rootDomain))) }}
          grafana.ini:
            {{- if and (default false $appConfig.ingress.enabled) (not (not $appConfig.ingress.rootDomain)) }}
            server:
              root_url: "https://grafana.{{ $appConfig.ingress.rootDomain }}"
            {{- end }}
            {{- if eq $appConfig.auth.type "google" }}
            auth.google:
              enabled: true
              client_id: {{ $appConfig.auth.oauthClientID }}
              client_secret: {{ $appConfig.auth.oauthClientSecret }}
              scopes: openid email profile https://www.googleapis.com/auth/cloud-identity.groups.readonly
              auth_url: https://accounts.google.com/o/oauth2/v2/auth
              token_url: https://oauth2.googleapis.com/token
              api_url: https://openidconnect.googleapis.com/v1/userinfo
              allowed_domains: {{ join " " $appConfig.auth.oauthValidEmailDomains | quote }}
              hosted_domain: {{ $appConfig.auth.oauthValidEmailDomains | first | quote }}
              use_pkce: true
              allow_assign_grafana_admin: true
              {{- if default false $appConfig.config.googleAuthRolePath }}
              role_attribute_path: {{ $appConfig.config.googleAuthRolePath }}
              {{- end }}
              skip_org_role_sync: false
            {{- end }}
          {{- end }}
{{- end }}
{{- end }}
